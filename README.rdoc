=Powwow: chat with a purpose

Also 'threadless' or 'thread bare'

set it up:

  bundle install
  rails generate devise install
  rails generate devise:views
  rails generate devise User

  rails generate rspec:install
  bundle guard init rspec
  bundle rake db:test:prepare
  bundle exec guard (to start up the tests)

It seems guard sees tmux and sends notifications to it directly.
The 'rb-notify' gem was messing up notifications, so I removed it from the Gemfile and everything is fixed.

There was somthing I needed to add to spec/support/devise.rb for things to workie

To do the kind of test we want, we need integration tests with Capybara. I've got a link to a tut.

############################
*1. Create users who can log in
*2. Users create groups
*- make the form for creating a group also create a membership
*3. Users can create memberships in groups.
*4. Users can look at descriptions of every group.
*- validates a unique combination of user and group id
- Users can go to a group page and create a membership_request, if they are not already a member




###########################
I need to go over my relational model notes. This shit has to fit together before I make anything.

Schema notes:

Topic
  has_and_belongs_to_many :messages
  has_one :resolution

Resolution
  belongs_to :topic

User
  has_many :messages
  has_many :topics
  has_many :votes

Message
  has_one :topic
  has_many :votes
  belongs_to :user

Vote
  belongs_to :user
  belongs_to :message


######## Groups section #########

User has_many Memberships
Membership belongs_to User, Membership belongs_to Group
GroupInvitations
GroupApplications

The first thing we should do is have a user create a group, and have users add themselves to groups, and subscribe to content.

Remember:

When we go to production, we'll need to change config/environments/production like so
config.action_mailer.default_url_options = { :host => 'localhost:3000' }
We had to set that up for devise, just to start
